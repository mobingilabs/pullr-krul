// +build ignore

package main

import (
	"bytes"
	"log"
	"os"
	"os/exec"
	"regexp"
	"strings"
	"text/template"
)

var packageTemplate = template.Must(template.New("").Parse(` // Code generated by go generate; DO NOT EDIT.
package main

const Version = "{{ .Version }}"
`))

func main() {
	versionRegexp := regexp.MustCompile("v\\d+\\.\\d+\\.\\d+")

	f, err := os.Create("version.go")
	defer f.Close()
	if err != nil {
		log.Fatal(err)
	}

	envTag := os.Getenv("PULLR_TAG")
	if len(envTag) > 0 && versionRegexp.MatchString(envTag) {
		version := versionRegexp.FindString(envTag)
		packageTemplate.Execute(f, struct{ Version string }{Version: version})
	}

	var gitTagBuffer bytes.Buffer
	tagCmd := exec.Command("git", "tag", "--points-at", "HEAD")
	tagCmd.Stdout = &gitTagBuffer
	if err := tagCmd.Run(); err != nil {
		log.Printf("ERROR: %v", err)
		generateUnknown(f)
	}

	tags := strings.Split(gitTagBuffer.String(), "\n")

	for _, gitTag := range tags {
		if !versionRegexp.MatchString(gitTag) {
			continue
		}

		version := versionRegexp.FindString(gitTag)
		packageTemplate.Execute(f, struct{ Version string }{Version: version})
		return
	}

	generateUnknown(f)
}

func generateUnknown(file *os.File) {
	packageTemplate.Execute(file, struct{ Version string }{Version: "unknown"})
}
