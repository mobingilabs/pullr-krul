sudo: required

os:
  - linux

language: go

services:
  - docker

go:
  - master

before_install:
  - go get github.com/golang/dep/...

install:
  - $GOPATH/bin/dep ensure

script:
  - docker --version
  - go test -v $(go list ./... | grep -v /vendor/) -cover
  - if [[ "$TRAVIS_BRANCH" == "$TRAVIS_TAG" ]]; then
      pip install --user awscli;
      export PATH=$PATH:$HOME/.local/bin;
      export CLUSTER="pullr-ecs";
      export REGION="ap-northeast-1";
      export ECR_REPO_URI="963826138034.dkr.ecr.${REGION}.amazonaws.com";
      export IMAGE_NAME=pullrkrul;
      export REPOSITORY_NAME="pullrkrul";
      export IMAGE_URI="${ECR_REPO_URI}/${REPOSITORY_NAME}";
      export VERSION_TAG=`echo ${TRAVIS_TAG} | sed 's/\-dev//g' | sed 's/\-alpha//g'`;
      echo "VERSION_TAG=${VERSION_TAG}";
      aws --version;
      eval $(aws ecr get-login --region ${REGION});
      docker images;
      docker build --build-arg PULLR_TAG=${VERSION_TAG} --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --build-arg AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} --build-arg DEV_PULLR_SNS_ARN=${DEV_PULLR_SNS_ARN} --build-arg AWS_REGION=${AWS_REGION} -t pullrkrul:${VERSION_TAG} .;
      docker tag ${IMAGE_NAME}:${VERSION_TAG} ${IMAGE_URI}:${VERSION_TAG};
      docker push ${IMAGE_URI}:${VERSION_TAG};
      if [[ $TRAVIS_TAG == *"dev"* ]]; then
        docker tag ${IMAGE_NAME}:${VERSION_TAG} ${IMAGE_URI}:dev;
        docker push ${IMAGE_URI}:dev;
        export BUILD_TAG="dev";
        export SERVICE_NAME="pullrkrul-dev";
        export TASK_NAME="pullrkrul-dev";
        export CONTAINER_NAME="pullrkrul-dev";
      else
        docker tag ${IMAGE_NAME}:${VERSION_TAG} ${IMAGE_URI}:latest;
        docker push ${IMAGE_URI}:latest;
        export BUILD_TAG="latest";
        export SERVICE_NAME="pullrkrul";
        export TASK_NAME="pullrkrul";
        export CONTAINER_NAME="pullrkrul";
      fi;
      sh ./update-ecs.sh;
    else
      go build -v;
    fi

notifications:
  slack:
    secure: f3Bnp6vdAVlsyWom3f8b1rv55USOrxzlvzlY+2LBg3yPlTSJGQ4Fb1Zw/2HLP4dOpPmhqwtsV+gGT59X2hpjsE8W90J4Zq3zUV3b7+bHwvrR6UXW+vIJVez/FINRkqhg3IOXul+t6dFox2F5HNH1BlWQqHAa3TeuEX3639UKkjlXWpWdqQmmvTkodr8iBB2hQasDBVPGFSEurYpc99SITB1m4dedEZLoWjJOAzAWe1EIfXni8AAj5ngxDShQIZrZntf4ljR6O3rVrUSl9oHqjMql0SpbbQ34ExLRUmWqDTKlFAHT1gNxg/FRaL0sVFabmbZhYVOGw/+t11VNXmtWhuHaLG9BPU0svTaFFY4TVLRDAeph3o3kd/5MHAz0tjxmi5NES5/irMDqT/sYHQcCfb5QqLZmatVtnyWM+VM3MDIETo7LLKCo+N2BbuVtOKjpPQ9tPuAHFyE2UIxIgYmaDBmBUi92nQOKlvf6GenAmg0MGlIJ4KXBMLAHNDvJols2L5sML4rETHxWiEp0rK64Tb01U4smyi1G+QJVigY8WoxbnOHZjVA76knu3mWoL3K1DmqzqIhs277iTJTYEgqK4SaA3dgiQNnLdLdviXutYb3vm4YJspn9twfBWfYtb5WZ6SYxNLXZ2NYjEjhYOZOeVqtBSUk+DKfVCCMPikBfGwA=
